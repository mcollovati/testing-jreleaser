name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g. 1.1.0 or 1.2.0.alpha1)"
        required: true
        type: string
      dry-run:
        description: "Dry run (Skips remote operations)"
        type: boolean
        default: false
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Validate version
        run: |
          .github/scripts/check_version.sh "${{ github.event.inputs.version }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          server-id: central

      - name: Staging artifacts
        env:
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          echo mvn -Pdistribution deploy -DaltDeploymentRepository=local::file:./target/staging-deploy

      - name: Run JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_DEPLOY_MAVEN_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          echo mvn -Pdistribution -Djreleaser.dry.run=${{ github.event.inputs.dry-run }} jreleaser:full-release 

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties