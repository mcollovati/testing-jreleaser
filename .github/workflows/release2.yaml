name: Release (event)
on:
  release:
    types: [created]
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event.release.draft

    steps:

      - name: Validate version

        run: |
          VERSION_REGEX='^[0-9]+\.[0-9]+\.[0-9]+(\.(alpha|beta|rc)[0-9]+)?$'
          if [[ ! "${{ github.event.release.tag_name }}" =~ $VERSION_REGEX ]]; then
            echo "ERROR: Invalid version specified: '${{ github.event.release.tag_name }}'. Please enter a valid SemVer version, like '1.2.3' or '1.0.0.alpha1'."
            exit 1
          fi
          if git rev-parse -q --verify "refs/tags/${{ github.event.release.tag_name }}" >/dev/null; then
            echo "Version ${{ github.event.release.tag_name }} already exists. Please choose a different version."
            exit 1
          fi

      - name: Check Branch
        env:
          TARGET_BRANCH: ${{ github.event.release.target_commitish }}
        run: |
          ALLOWED_BRANCHES=("main" "1.0" "2.0")
          BRANCH_NAME=${TARGET_BRANCH##*/}
          if [[ ! " ${ALLOWED_BRANCHES[@]} " =~ " ${BRANCH_NAME} " ]]; then
            echo "ERROR: Branch ${TARGET_BRANCH} is not allowed. Only branches $(IFS=,; echo "${ALLOWED_BRANCHES[*]}") are allowed."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.target_commitish }}
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Staging artifacts
        run: |
          mvn -V -ntp -Pdistribution deploy -Drevision=${{ github.event.release.tag_name }} -DaltDeploymentRepository=local::file:./target/staging-deploy

      - name: Run JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_DEPLOY_MAVEN_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
        run: |
          mvn -V -ntp -Pdistribution  -Drevision=${{ github.event.release.tag_name }} -Djreleaser.dry.run=true jreleaser:full-release 

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jreleaser-release
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties